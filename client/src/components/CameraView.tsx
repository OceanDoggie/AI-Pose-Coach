import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Camera, CameraOff, RotateCcw, Settings, Target } from 'lucide-react';\nimport type { PoseTemplate, CameraSettings } from '@shared/schema';\n\ninterface CameraViewProps {\n  selectedPose: PoseTemplate | null;\n  settings: CameraSettings;\n  onScoreUpdate: (score: number, stable: boolean) => void;\n  onPhotoCapture: (imageData: string) => void;\n}\n\nexport default function CameraView({ \n  selectedPose, \n  settings, \n  onScoreUpdate, \n  onPhotoCapture \n}: CameraViewProps) {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [isStable, setIsStable] = useState(false);\n  const [countdown, setCountdown] = useState(0);\n  const [cameraError, setCameraError] = useState<string | null>(null);\n  \n  // TODO: Mock pose detection - replace with MediaPipe implementation\n  const mockPoseScore = useCallback(() => {\n    if (!selectedPose) return 0;\n    // Simulate fluctuating pose similarity score\n    const baseScore = 65 + Math.random() * 25;\n    const score = Math.min(100, Math.max(0, baseScore + (Math.random() - 0.5) * 10));\n    return Math.round(score);\n  }, [selectedPose]);\n\n  const startCamera = useCallback(async () => {\n    try {\n      setCameraError(null);\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: settings.facingMode,\n          width: { ideal: 1280 },\n          height: { ideal: 720 }\n        }\n      });\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n        setIsStreaming(true);\n      }\n    } catch (error) {\n      console.error('Camera access failed:', error);\n      setCameraError('无法访问摄像头 / Camera access failed');\n    }\n  }, [settings.facingMode]);\n\n  const stopCamera = useCallback(() => {\n    if (videoRef.current?.srcObject) {\n      const tracks = (videoRef.current.srcObject as MediaStream).getTracks();\n      tracks.forEach(track => track.stop());\n      videoRef.current.srcObject = null;\n    }\n    setIsStreaming(false);\n  }, []);\n\n  const capturePhoto = useCallback(() => {\n    if (!videoRef.current || !canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    if (ctx) {\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      ctx.drawImage(video, 0, 0);\n      \n      const imageData = canvas.toDataURL('image/jpeg', 0.8);\n      onPhotoCapture(imageData);\n      console.log('Photo captured successfully');\n    }\n  }, [onPhotoCapture]);\n\n  // Auto-shutter logic\n  useEffect(() => {\n    if (!settings.autoShutter || !selectedPose) return;\n    \n    const interval = setInterval(() => {\n      const score = mockPoseScore();\n      setCurrentScore(score);\n      \n      const stable = score >= settings.threshold;\n      setIsStable(stable);\n      onScoreUpdate(score, stable);\n      \n      if (stable && isStreaming) {\n        setCountdown(prev => {\n          if (prev === 0) {\n            return settings.stableFrames;\n          } else if (prev === 1) {\n            capturePhoto();\n            return 0;\n          }\n          return prev - 1;\n        });\n      } else {\n        setCountdown(0);\n      }\n    }, 100); // 10 FPS mock detection\n    \n    return () => clearInterval(interval);\n  }, [settings, selectedPose, mockPoseScore, onScoreUpdate, capturePhoto, isStreaming]);\n\n  useEffect(() => {\n    return () => {\n      stopCamera();\n    };\n  }, [stopCamera]);\n\n  const switchCamera = () => {\n    stopCamera();\n    setTimeout(() => {\n      startCamera();\n    }, 100);\n  };\n\n  if (cameraError) {\n    return (\n      <div className=\"flex-1 bg-camera-black flex items-center justify-center\">\n        <Card className=\"p-8 text-center\">\n          <CameraOff className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n          <p className=\"text-lg font-medium mb-2\">摄像头访问失败</p>\n          <p className=\"text-sm text-muted-foreground mb-4\">{cameraError}</p>\n          <Button onClick={startCamera} data-testid=\"button-retry-camera\">\n            <Camera className=\"w-4 h-4 mr-2\" />\n            重试 / Retry\n          </Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 relative bg-camera-black overflow-hidden\">\n      {/* Video Stream */}\n      <video\n        ref={videoRef}\n        autoPlay\n        playsInline\n        muted\n        className=\"w-full h-full object-cover\"\n        data-testid=\"video-camera-stream\"\n      />\n      \n      {/* Hidden canvas for photo capture */}\n      <canvas ref={canvasRef} className=\"hidden\" />\n      \n      {/* Overlay UI */}\n      <div className=\"absolute inset-0 pointer-events-none\">\n        {/* Grid Lines */}\n        <div className=\"absolute inset-0\">\n          {/* Rule of thirds grid */}\n          <div className=\"grid grid-cols-3 grid-rows-3 w-full h-full border border-overlay-white/20\">\n            {Array.from({ length: 9 }).map((_, i) => (\n              <div key={i} className=\"border border-overlay-white/10\" />\n            ))}\n          </div>\n        </div>\n        \n        {/* Pose Skeleton Overlay - Mock */}\n        {selectedPose && isStreaming && (\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"relative w-32 h-48\">\n              {/* Mock skeleton points */}\n              <div className=\"absolute top-4 left-1/2 w-3 h-3 bg-pose-green rounded-full transform -translate-x-1/2\" />\n              <div className=\"absolute top-12 left-1/2 w-2 h-2 bg-pose-green rounded-full transform -translate-x-1/2\" />\n              <div className=\"absolute top-12 left-8 w-2 h-2 bg-pose-green rounded-full\" />\n              <div className=\"absolute top-12 right-8 w-2 h-2 bg-pose-green rounded-full\" />\n              <div className=\"absolute top-20 left-6 w-2 h-2 bg-pose-green rounded-full\" />\n              <div className=\"absolute top-20 right-6 w-2 h-2 bg-pose-green rounded-full\" />\n              \n              {/* Connecting lines */}\n              <svg className=\"absolute inset-0 w-full h-full\">\n                <line x1=\"50%\" y1=\"16px\" x2=\"50%\" y2=\"48px\" stroke=\"#16a34a\" strokeWidth=\"2\" opacity=\"0.8\" />\n                <line x1=\"50%\" y1=\"48px\" x2=\"32px\" y2=\"48px\" stroke=\"#16a34a\" strokeWidth=\"2\" opacity=\"0.8\" />\n                <line x1=\"50%\" y1=\"48px\" x2=\"96px\" y2=\"48px\" stroke=\"#16a34a\" strokeWidth=\"2\" opacity=\"0.8\" />\n                <line x1=\"32px\" y1=\"48px\" x2=\"24px\" y2=\"80px\" stroke=\"#16a34a\" strokeWidth=\"2\" opacity=\"0.8\" />\n                <line x1=\"96px\" y1=\"48px\" x2=\"104px\" y2=\"80px\" stroke=\"#16a34a\" strokeWidth=\"2\" opacity=\"0.8\" />\n              </svg>\n            </div>\n          </div>\n        )}\n        \n        {/* Score Display */}\n        {selectedPose && (\n          <div className=\"absolute top-4 right-4\">\n            <Card className=\"bg-black/50 backdrop-blur-sm border-overlay-white/20 p-3\">\n              <div className=\"text-center\">\n                <div className={`text-2xl font-bold mb-1 ${\n                  currentScore >= settings.threshold ? 'text-pose-green' : 'text-overlay-white'\n                }`} data-testid=\"text-pose-score\">\n                  {currentScore}%\n                </div>\n                <div className=\"w-20 h-2 bg-black/30 rounded-full overflow-hidden\">\n                  <div \n                    className={`h-full transition-all duration-300 ${\n                      currentScore >= settings.threshold ? 'bg-pose-green' : 'bg-progress-blue'\n                    }`}\n                    style={{ width: `${currentScore}%` }}\n                  />\n                </div>\n                {countdown > 0 && (\n                  <div className=\"mt-2 text-lg font-bold text-pose-green animate-pulse\" data-testid=\"text-countdown\">\n                    {Math.ceil(countdown / 10)}\n                  </div>\n                )}\n              </div>\n            </Card>\n          </div>\n        )}\n        \n        {/* Pose Name */}\n        {selectedPose && (\n          <div className=\"absolute top-4 left-4\">\n            <Badge className=\"bg-black/50 backdrop-blur-sm text-overlay-white border-overlay-white/20\" data-testid=\"badge-pose-name\">\n              <Target className=\"w-3 h-3 mr-1\" />\n              {selectedPose.name.split(' / ')[0]}\n            </Badge>\n          </div>\n        )}\n      </div>\n      \n      {/* Camera Controls */}\n      <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 pointer-events-auto\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            size=\"icon\"\n            variant=\"secondary\"\n            className=\"bg-black/50 backdrop-blur-sm hover:bg-black/70 border-overlay-white/20\"\n            onClick={switchCamera}\n            data-testid=\"button-switch-camera\"\n          >\n            <RotateCcw className=\"w-5 h-5\" />\n          </Button>\n          \n          {!isStreaming ? (\n            <Button \n              onClick={startCamera}\n              size=\"lg\"\n              className=\"bg-pose-green hover:bg-pose-green/90 text-white min-w-32\"\n              data-testid=\"button-start-camera\"\n            >\n              <Camera className=\"w-5 h-5 mr-2\" />\n              开始拍摄\n            </Button>\n          ) : (\n            <Button \n              onClick={capturePhoto}\n              size=\"lg\" \n              className=\"bg-white hover:bg-white/90 text-black min-w-32\"\n              data-testid=\"button-capture-photo\"\n            >\n              📸 拍照\n            </Button>\n          )}\n          \n          <Button\n            size=\"icon\"\n            variant=\"secondary\"\n            className=\"bg-black/50 backdrop-blur-sm hover:bg-black/70 border-overlay-white/20\"\n            data-testid=\"button-camera-settings\"\n          >\n            <Settings className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"